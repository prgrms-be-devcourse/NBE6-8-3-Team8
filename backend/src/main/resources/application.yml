server:
  forward-headers-strategy: native
spring:
  application:
    name: backend
  config:
    import: optional:file:.env.default[.properties]
  profiles:
    active: dev
    include: secret
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${SPRING__SECURITY__OAUTH2__CLIENT__REGISTRATION__KAKAO__CLIENT_ID}
            scope: profile_nickname, profile_image
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'
          google:
            client-id: ${SPRING__SECURITY__OAUTH2__CLIENT__REGISTRATION__GOOGLE__CLIENT_ID}
            client-secret: ${SPRING__SECURITY__OAUTH2__CLIENT__REGISTRATION__GOOGLE__CLIENT_SECRET}
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}' #사용자가 구글에서 로그인을 성공적으로 마치고 동의 절차를 완료했을 때, 구글이 사용자를 다시 돌려보낼 애플리케이션의 경로
            client-name: Google
            scope: profile
          naver:
            client-id: ${SPRING__SECURITY__OAUTH2__CLIENT__REGISTRATION__NAVER__CLIENT_ID}
            client-secret: ${SPRING__SECURITY__OAUTH2__CLIENT__REGISTRATION__NAVER__CLIENT_SECRET}
            scope: profile_nickname, profile_image
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
      format_sql: true
      highlight_sql: true
      use_sql_comments: true
  ai:
    openai:
      base-url: https://api.groq.com/openai
      api-key: ${SPRING__AI__OPENAI__API_KEY}
      chat:
        options:
          model: meta-llama/llama-4-maverick-17b-128e-instruct
          temperature: 0

management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: when-authorized

custom:
  jwt:
    secretKey: ${CUSTOM__JWT__SECRET_KEY}
  accessToken:
    expirationSeconds: "#{60*20}"
  frontend:
    url: ${FRONTEND_URL:http://localhost:3000}