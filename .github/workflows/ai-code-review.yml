name: AI Code Review for Kotlin Migration

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'backend/**/*.java'
      - 'backend/**/*.kt'
      - 'backend/**/*.kts'
      - 'backend/build.gradle.kts'

jobs:
  ai-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: AI Code Review
        uses: actions/github-script@v7
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        with:
          script: |
            const diff = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.pull_request.base.sha,
              head: context.payload.pull_request.head.sha
            });
            
            // Java와 Kotlin 파일 필터링
            const reviewableFiles = diff.data.files.filter(file => 
              (file.filename.endsWith('.java') || 
               file.filename.endsWith('.kt') || 
               file.filename.endsWith('.kts')) && 
              file.patch &&
              file.status !== 'removed'
            );
            
            if (reviewableFiles.length === 0) {
              console.log('No reviewable files found');
              return;
            }
            
            const fileReviews = [];
            const javaToKotlinMigration = [];
            
            // 파일별 리뷰 (최대 5개)
            for (const file of reviewableFiles.slice(0, 5)) {
              const fileType = file.filename.endsWith('.java') ? 'Java' : 'Kotlin';
              const isNewFile = file.status === 'added';
              
              // Java 파일과 동일한 경로의 Kotlin 파일 체크 (마이그레이션 감지)
              const baseFilename = file.filename.replace(/\.(java|kt)$/, '');
              const isMigration = reviewableFiles.some(f => 
                f.filename.replace(/\.(java|kt)$/, '') === baseFilename && 
                f.filename !== file.filename
              );
              
              if (isMigration && fileType === 'Kotlin') {
                javaToKotlinMigration.push(file.filename);
              }
              
              try {
                const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    model: 'deepseek/deepseek-r1-0528:free',
                    messages: [{
                      role: 'system',
                      content: `당신은 Spring Boot와 Kotlin 마이그레이션 전문가입니다.
                      ${isMigration ? 'Java에서 Kotlin으로 마이그레이션된 코드를 검토합니다.' : '코드 변경사항을 리뷰합니다.'}
                      
                      리뷰 포맷:
                      🟢 **좋은 점**
                      - Kotlin 관용구 활용
                      - 코드 간결성 향상
                      - Null safety 적용
                      
                      🟡 **개선 제안**
                      - 더 나은 Kotlin 패턴
                      - 성능 최적화
                      - 가독성 향상
                      
                      🔴 **필수 수정**
                      - 버그나 오류
                      - 보안 문제
                      - Java 호환성 이슈
                      
                      ${fileType === 'Kotlin' ? `
                      Kotlin 체크리스트:
                      ✅ Data class 활용 가능성
                      ✅ Extension functions 사용
                      ✅ Scope functions (let, apply, with, run, also)
                      ✅ Null safety (?., ?:, !!)
                      ✅ Collection operations
                      ✅ Coroutines 적용 가능성
                      ✅ @JvmStatic, @JvmOverloads 등 Java 호환 어노테이션
                      ` : ''}
                      
                      간결하고 실용적인 피드백만 제공하세요.`
                    }, {
                      role: 'user',
                      content: `파일: ${file.filename}
                      타입: ${fileType} ${isNewFile ? '(새 파일)' : '(수정)'}
                      ${isMigration ? '⚡ Java → Kotlin 마이그레이션' : ''}
                      
                      변경사항:
                      \`\`\`diff
                      ${file.patch}
                      \`\`\``
                    }],
                    max_tokens: 1000,
                    temperature: 0.2
                  })
                });
                
                if (response.ok) {
                  const result = await response.json();
                  fileReviews.push({
                    filename: file.filename,
                    review: result.choices[0].message.content,
                    fileType: fileType,
                    isMigration: isMigration
                  });
                }
              } catch (error) {
                console.error(`Error reviewing ${file.filename}:`, error);
              }
            }
            
            // PR 리뷰 작성
            if (fileReviews.length > 0) {
              let reviewBody = `# 🤖 AI Code Review - Kotlin Migration\n\n`;
              
              // 마이그레이션 파일이 있는 경우
              if (javaToKotlinMigration.length > 0) {
                reviewBody += `## 🔄 Java → Kotlin 마이그레이션 감지\n\n`;
                reviewBody += `다음 파일들이 Kotlin으로 마이그레이션되었습니다:\n`;
                javaToKotlinMigration.forEach(f => {
                  reviewBody += `- ✅ \`${f}\`\n`;
                });
                reviewBody += `\n---\n\n`;
              }
              
              // 파일별 상세 리뷰
              reviewBody += `## 📝 상세 리뷰\n\n`;
              for (const fileReview of fileReviews) {
                reviewBody += `### \`${fileReview.filename}\` `;
                reviewBody += fileReview.isMigration ? `🔄 (마이그레이션)` : `(${fileReview.fileType})`;
                reviewBody += `\n\n${fileReview.review}\n\n`;
              }
              
              // 마이그레이션 체크리스트 (Kotlin 파일이 있는 경우)
              const hasKotlinFiles = fileReviews.some(r => r.fileType === 'Kotlin');
              if (hasKotlinFiles) {
                reviewBody += `---\n\n## ✅ Kotlin 마이그레이션 체크리스트\n\n`;
                reviewBody += `- [ ] Null safety 적절히 활용됨\n`;
                reviewBody += `- [ ] Data class로 변환 가능한 부분 확인\n`;
                reviewBody += `- [ ] Extension functions 활용 검토\n`;
                reviewBody += `- [ ] Collection operations 최적화\n`;
                reviewBody += `- [ ] Java 상호운용성 확인\n`;
                reviewBody += `- [ ] 테스트 코드 마이그레이션 필요성 검토\n\n`;
              }
              
              // 푸터
              reviewBody += `---\n\n`;
              reviewBody += `> 🤖 **Model**: DeepSeek R1 (deepseek-r1-0528:free)\n`;
              reviewBody += `> 📊 **검토 파일**: ${fileReviews.length}/${reviewableFiles.length}개\n`;
              reviewBody += `> 🏷️ **Mode**: Kotlin Migration Review\n`;
              
              // 리뷰 생성
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: reviewBody,
                event: 'COMMENT'
              });
              
              // 라벨 추가 시도
              if (javaToKotlinMigration.length > 0) {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number,
                    labels: ['kotlin-migration']
                  });
                } catch (e) {
                  console.log('Label addition failed (labels might not exist)');
                }
              }
            }